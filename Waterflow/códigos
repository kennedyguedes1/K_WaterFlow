#include <WiFi.h>
#include <PubSubClient.h>
#include <DHT.h>


#define DHTPIN 15
#define DHTTYPE DHT11

#define LED_TEMP 4
#define LED_VALV 5

const char* ssid = "Wokwi-GUEST";
const char* password = "";

const char* mqtt_server = "mqtt.eclipseprojects.io";
const int mqtt_port = 1883;

WiFiClient espClient;
PubSubClient mqtt_client(espClient);

DHT dht(DHTPIN, DHTTYPE);

void setup() {
  Serial.begin(115200);

  pinMode(LED_TEMP, OUTPUT);
  pinMode(LED_VALV, OUTPUT);

  dht.begin();

  WiFi.begin(ssid, password);
  Serial.print("Conectando ao WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi conectado com sucesso!");
  Serial.print("IP obtido: ");
  Serial.println(WiFi.localIP());

  mqtt_client.setServer(mqtt_server, mqtt_port);
  mqtt_client.setCallback(mqttCallback);
}

void mqttCallback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Mensagem recebida no tópico [");
  Serial.print(topic);
  Serial.print("]: ");

  for (unsigned int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
}

void reconnect() {
  while (!mqtt_client.connected()) {
    Serial.print("Tentando conexão MQTT... ");
    String clientId = "ESP32Client-" + String(random(0xffff), HEX);
    if (mqtt_client.connect(clientId.c_str())) {
      Serial.println("Conectado ao MQTT Broker!");
      // Aqui, você pode adicionar subscribe se quiser receber mensagens
      // ex: mqtt_client.subscribe("algum/topico");
    } else {
      Serial.print("Falha na conexão, rc=");
      Serial.print(mqtt_client.state());
      Serial.println(" tentando novamente em 5 segundos...");
      delay(5000);
    }
  }
}

void loop() {
  if (!mqtt_client.connected()) {
    reconnect();
  }
  mqtt_client.loop();

  float temp = dht.readTemperature();
  float hum = dht.readHumidity();

  if (isnan(temp) || isnan(hum)) {
    Serial.println("Erro na leitura do sensor DHT!");
    delay(2000);
    return;
  }

  Serial.print("Temperatura: ");
  Serial.print(temp);
  Serial.print(" °C, Umidade: ");
  Serial.print(hum);
  Serial.println(" %");

  String temp_str = String(temp, 1);
  String hum_str = String(hum, 1);

  if (!mqtt_client.connected()) {
    Serial.println("MQTT desconectado, reconectando...");
    reconnect();
  }

  bool pubTemp = mqtt_client.publish("k_waterflow/temp", temp_str.c_str());
  bool pubHum = mqtt_client.publish("k_waterflow/hum", hum_str.c_str());

  if (pubTemp) {
    Serial.println("Temperatura enviada via MQTT com sucesso!");
  } else {
    Serial.println("Falha ao enviar temperatura via MQTT!");
  }

  if (pubHum) {
    Serial.println("Umidade enviada via MQTT com sucesso!");
  } else {
    Serial.println("Falha ao enviar umidade via MQTT!");
  }

  Serial.println("Dados enviados com sucesso para o ThingSpeak (simulado).");

  delay(5000);
}
